name: Main CI/CD workflow

on: [ push ]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.x"
      - uses: pre-commit/action@v3.0.1
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v3
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v4.0.2
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run the automated tests (for example)
        run: poetry run pytest -v
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
#  release-build:
#    runs-on: ubuntu-latest
#    needs:
#      - test
#      - pre-commit
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: "3.x"
#
#      - name: Install poetry
#        uses: abatilo/actions-poetry@v3
#
#      - name: Build release distributions
#        run: |
#          poetry build
#
#      - name: Upload distributions
#        uses: actions/upload-artifact@v4
#        with:
#          name: release-dists
#          path: dist/
#  build:
#    name: Create Release
#    needs:
#      - release-build
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#      pull-requests: write
#      repository-projects: write
#    steps:
#      - name: Create release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          tag: ${{ github.ref_name }}
#        run: |
#          gh release create "$tag" \
#              --repo="$GITHUB_REPOSITORY" \
#              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
#              --generate-notes