name: Main CI/CD workflow

on: [ push ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.x"
      - uses: pre-commit/action@v3.0.1
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v3
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v4.0.2
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run the automated tests (for example)
        run: poetry run pytest -v
      - name: Build coverage file
        run: |
          pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered | tee pytest-coverage.txt

  coverage:
    runs-on: ubuntu-latest
    needs:
      - test
      - pre-commit
    steps:
      - name: Get Cover
        uses: orgoro/coverage@v3.1
        with:
          coverageFile: path/to/coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
#      - uses: actions/checkout@v4
#        with:
#          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
#          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
#
#      - name: Pytest coverage comment
#        if: ${{ github.ref == 'refs/heads/main' }}
#        id: coverageComment
#        uses: MishaKav/pytest-coverage-comment@main
#        with:
#          hide-comment: true
#          pytest-coverage-path: pytest-coverage.txt
#
#      - name: Update Readme with Coverage Html
#        if: ${{ github.ref == 'refs/heads/main' }}
#        run: |
#          sed -i '/<!-- Pytest Coverage Comment:Begin -->/,/<!-- Pytest Coverage Comment:End -->/c\<!-- Pytest Coverage Comment:Begin -->\${{ steps.coverageComment.outputs.coverageHtml }}<!-- Pytest Coverage Comment:End -->' ./README.md
#
#      - name: Commit & Push changes to Readme
#        if: ${{ github.ref == 'refs/heads/main' }}
#        uses: actions-js/push@master
#        with:
#          message: Update coverage on Readme
#          github_token: ${{ secrets.GITHUB_TOKEN }}

#  release-build:
#    runs-on: ubuntu-latest
#    needs:
#      - test
#      - pre-commit
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: "3.x"
#
#      - name: Install poetry
#        uses: abatilo/actions-poetry@v3
#
#      - name: Build release distributions
#        run: |
#          poetry build
#
#      - name: Upload distributions
#        uses: actions/upload-artifact@v4
#        with:
#          name: release-dists
#          path: dist/
#  build:
#    name: Create Release
#    needs:
#      - release-build
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#      pull-requests: write
#      repository-projects: write
#    steps:
#      - name: Create release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          tag: ${{ github.ref_name }}
#        run: |
#          gh release create "$tag" \
#              --repo="$GITHUB_REPOSITORY" \
#              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
#              --generate-notes